
freeRTOS_1280_v0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00000f40  00000fd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000279  0080020a  0080020a  00000fde  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fde  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001010  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003024  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000122a  00000000  00000000  000042d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a27  00000000  00000000  000054fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000814  00000000  00000000  00006f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011cc  00000000  00000000  0000773c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002646  00000000  00000000  00008908  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000af4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c2       	rjmp	.+1218   	; 0x508 <__vector_17>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e0 e4       	ldi	r30, 0x40	; 64
  f8:	ff e0       	ldi	r31, 0x0F	; 15
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	aa 30       	cpi	r26, 0x0A	; 10
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	24 e0       	ldi	r18, 0x04	; 4
 10c:	aa e0       	ldi	r26, 0x0A	; 10
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a3 38       	cpi	r26, 0x83	; 131
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	f9 d6       	rcall	.+3570   	; 0xf0e <main>
 11c:	0f c7       	rjmp	.+3614   	; 0xf3c <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 120:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 122:	03 96       	adiw	r24, 0x03	; 3
 124:	92 83       	std	Z+2, r25	; 0x02
 126:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 128:	4f ef       	ldi	r20, 0xFF	; 255
 12a:	5f ef       	ldi	r21, 0xFF	; 255
 12c:	ba 01       	movw	r22, r20
 12e:	43 83       	std	Z+3, r20	; 0x03
 130:	54 83       	std	Z+4, r21	; 0x04
 132:	65 83       	std	Z+5, r22	; 0x05
 134:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 136:	90 87       	std	Z+8, r25	; 0x08
 138:	87 83       	std	Z+7, r24	; 0x07
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 13a:	92 87       	std	Z+10, r25	; 0x0a
 13c:	81 87       	std	Z+9, r24	; 0x09

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 13e:	10 82       	st	Z, r1
 140:	08 95       	ret

00000142 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 142:	fc 01       	movw	r30, r24
 144:	13 86       	std	Z+11, r1	; 0x0b
 146:	12 86       	std	Z+10, r1	; 0x0a
 148:	08 95       	ret

0000014a <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	9c 01       	movw	r18, r24
 150:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
 152:	dc 01       	movw	r26, r24
 154:	11 96       	adiw	r26, 0x01	; 1
 156:	cd 91       	ld	r28, X+
 158:	dc 91       	ld	r29, X
 15a:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 15c:	d5 83       	std	Z+5, r29	; 0x05
 15e:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 160:	8e 81       	ldd	r24, Y+6	; 0x06
 162:	9f 81       	ldd	r25, Y+7	; 0x07
 164:	97 83       	std	Z+7, r25	; 0x07
 166:	86 83       	std	Z+6, r24	; 0x06

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 168:	8e 81       	ldd	r24, Y+6	; 0x06
 16a:	9f 81       	ldd	r25, Y+7	; 0x07
 16c:	dc 01       	movw	r26, r24
 16e:	15 96       	adiw	r26, 0x05	; 5
 170:	7c 93       	st	X, r23
 172:	6e 93       	st	-X, r22
 174:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxPrevious = pxNewListItem;
 176:	7f 83       	std	Y+7, r23	; 0x07
 178:	6e 83       	std	Y+6, r22	; 0x06

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 17a:	33 87       	std	Z+11, r19	; 0x0b
 17c:	22 87       	std	Z+10, r18	; 0x0a

	( pxList->uxNumberOfItems )++;
 17e:	f9 01       	movw	r30, r18
 180:	80 81       	ld	r24, Z
 182:	8f 5f       	subi	r24, 0xFF	; 255
 184:	80 83       	st	Z, r24
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 196:	08 81       	ld	r16, Y
 198:	19 81       	ldd	r17, Y+1	; 0x01
 19a:	2a 81       	ldd	r18, Y+2	; 0x02
 19c:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 19e:	0f 3f       	cpi	r16, 0xFF	; 255
 1a0:	4f ef       	ldi	r20, 0xFF	; 255
 1a2:	14 07       	cpc	r17, r20
 1a4:	24 07       	cpc	r18, r20
 1a6:	34 07       	cpc	r19, r20
 1a8:	21 f4       	brne	.+8      	; 0x1b2 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1aa:	fc 01       	movw	r30, r24
 1ac:	a1 85       	ldd	r26, Z+9	; 0x09
 1ae:	b2 85       	ldd	r27, Z+10	; 0x0a
 1b0:	11 c0       	rjmp	.+34     	; 0x1d4 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1b2:	dc 01       	movw	r26, r24
 1b4:	13 96       	adiw	r26, 0x03	; 3
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <vListInsert+0x2e>
 1b8:	df 01       	movw	r26, r30
 1ba:	14 96       	adiw	r26, 0x04	; 4
 1bc:	ed 91       	ld	r30, X+
 1be:	fc 91       	ld	r31, X
 1c0:	15 97       	sbiw	r26, 0x05	; 5
 1c2:	40 81       	ld	r20, Z
 1c4:	51 81       	ldd	r21, Z+1	; 0x01
 1c6:	62 81       	ldd	r22, Z+2	; 0x02
 1c8:	73 81       	ldd	r23, Z+3	; 0x03
 1ca:	04 17       	cp	r16, r20
 1cc:	15 07       	cpc	r17, r21
 1ce:	26 07       	cpc	r18, r22
 1d0:	37 07       	cpc	r19, r23
 1d2:	90 f7       	brcc	.-28     	; 0x1b8 <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d4:	14 96       	adiw	r26, 0x04	; 4
 1d6:	ed 91       	ld	r30, X+
 1d8:	fc 91       	ld	r31, X
 1da:	15 97       	sbiw	r26, 0x05	; 5
 1dc:	fd 83       	std	Y+5, r31	; 0x05
 1de:	ec 83       	std	Y+4, r30	; 0x04
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1e0:	d7 83       	std	Z+7, r29	; 0x07
 1e2:	c6 83       	std	Z+6, r28	; 0x06
	pxNewListItem->pxPrevious = pxIterator;
 1e4:	bf 83       	std	Y+7, r27	; 0x07
 1e6:	ae 83       	std	Y+6, r26	; 0x06
	pxIterator->pxNext = pxNewListItem;
 1e8:	15 96       	adiw	r26, 0x05	; 5
 1ea:	dc 93       	st	X, r29
 1ec:	ce 93       	st	-X, r28
 1ee:	14 97       	sbiw	r26, 0x04	; 4

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 1f0:	9b 87       	std	Y+11, r25	; 0x0b
 1f2:	8a 87       	std	Y+10, r24	; 0x0a

	( pxList->uxNumberOfItems )++;
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 81       	ld	r18, Z
 1f8:	2f 5f       	subi	r18, 0xFF	; 255
 1fa:	20 83       	st	Z, r18
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	08 95       	ret

00000206 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 20c:	a2 85       	ldd	r26, Z+10	; 0x0a
 20e:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 210:	c4 81       	ldd	r28, Z+4	; 0x04
 212:	d5 81       	ldd	r29, Z+5	; 0x05
 214:	86 81       	ldd	r24, Z+6	; 0x06
 216:	97 81       	ldd	r25, Z+7	; 0x07
 218:	9f 83       	std	Y+7, r25	; 0x07
 21a:	8e 83       	std	Y+6, r24	; 0x06
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 21c:	c6 81       	ldd	r28, Z+6	; 0x06
 21e:	d7 81       	ldd	r29, Z+7	; 0x07
 220:	84 81       	ldd	r24, Z+4	; 0x04
 222:	95 81       	ldd	r25, Z+5	; 0x05
 224:	9d 83       	std	Y+5, r25	; 0x05
 226:	8c 83       	std	Y+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 228:	11 96       	adiw	r26, 0x01	; 1
 22a:	8d 91       	ld	r24, X+
 22c:	9c 91       	ld	r25, X
 22e:	12 97       	sbiw	r26, 0x02	; 2
 230:	e8 17       	cp	r30, r24
 232:	f9 07       	cpc	r31, r25
 234:	31 f4       	brne	.+12     	; 0x242 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 236:	86 81       	ldd	r24, Z+6	; 0x06
 238:	97 81       	ldd	r25, Z+7	; 0x07
 23a:	12 96       	adiw	r26, 0x02	; 2
 23c:	9c 93       	st	X, r25
 23e:	8e 93       	st	-X, r24
 240:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 242:	13 86       	std	Z+11, r1	; 0x0b
 244:	12 86       	std	Z+10, r1	; 0x0a
	( pxList->uxNumberOfItems )--;
 246:	8c 91       	ld	r24, X
 248:	81 50       	subi	r24, 0x01	; 1
 24a:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 24c:	8c 91       	ld	r24, X
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 254:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 258:	8c e7       	ldi	r24, 0x7C	; 124
 25a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 25e:	8b e0       	ldi	r24, 0x0B	; 11
 260:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 264:	ef e6       	ldi	r30, 0x6F	; 111
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	82 60       	ori	r24, 0x02	; 2
 26c:	80 83       	st	Z, r24
 26e:	08 95       	ret

00000270 <pxPortInitialiseStack>:
 270:	31 e1       	ldi	r19, 0x11	; 17
 272:	fc 01       	movw	r30, r24
 274:	30 83       	st	Z, r19
 276:	31 97       	sbiw	r30, 0x01	; 1
 278:	22 e2       	ldi	r18, 0x22	; 34
 27a:	20 83       	st	Z, r18
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	a3 e3       	ldi	r26, 0x33	; 51
 280:	a0 83       	st	Z, r26
 282:	31 97       	sbiw	r30, 0x01	; 1
 284:	60 83       	st	Z, r22
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	70 83       	st	Z, r23
 28a:	31 97       	sbiw	r30, 0x01	; 1
 28c:	10 82       	st	Z, r1
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	60 e8       	ldi	r22, 0x80	; 128
 292:	60 83       	st	Z, r22
 294:	31 97       	sbiw	r30, 0x01	; 1
 296:	10 82       	st	Z, r1
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	62 e0       	ldi	r22, 0x02	; 2
 29c:	60 83       	st	Z, r22
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	63 e0       	ldi	r22, 0x03	; 3
 2a2:	60 83       	st	Z, r22
 2a4:	31 97       	sbiw	r30, 0x01	; 1
 2a6:	64 e0       	ldi	r22, 0x04	; 4
 2a8:	60 83       	st	Z, r22
 2aa:	31 97       	sbiw	r30, 0x01	; 1
 2ac:	65 e0       	ldi	r22, 0x05	; 5
 2ae:	60 83       	st	Z, r22
 2b0:	31 97       	sbiw	r30, 0x01	; 1
 2b2:	66 e0       	ldi	r22, 0x06	; 6
 2b4:	60 83       	st	Z, r22
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	67 e0       	ldi	r22, 0x07	; 7
 2ba:	60 83       	st	Z, r22
 2bc:	31 97       	sbiw	r30, 0x01	; 1
 2be:	68 e0       	ldi	r22, 0x08	; 8
 2c0:	60 83       	st	Z, r22
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	69 e0       	ldi	r22, 0x09	; 9
 2c6:	60 83       	st	Z, r22
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	60 e1       	ldi	r22, 0x10	; 16
 2cc:	60 83       	st	Z, r22
 2ce:	31 97       	sbiw	r30, 0x01	; 1
 2d0:	30 83       	st	Z, r19
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	32 e1       	ldi	r19, 0x12	; 18
 2d6:	30 83       	st	Z, r19
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	33 e1       	ldi	r19, 0x13	; 19
 2dc:	30 83       	st	Z, r19
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	34 e1       	ldi	r19, 0x14	; 20
 2e2:	30 83       	st	Z, r19
 2e4:	31 97       	sbiw	r30, 0x01	; 1
 2e6:	35 e1       	ldi	r19, 0x15	; 21
 2e8:	30 83       	st	Z, r19
 2ea:	31 97       	sbiw	r30, 0x01	; 1
 2ec:	36 e1       	ldi	r19, 0x16	; 22
 2ee:	30 83       	st	Z, r19
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	37 e1       	ldi	r19, 0x17	; 23
 2f4:	30 83       	st	Z, r19
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	38 e1       	ldi	r19, 0x18	; 24
 2fa:	30 83       	st	Z, r19
 2fc:	31 97       	sbiw	r30, 0x01	; 1
 2fe:	39 e1       	ldi	r19, 0x19	; 25
 300:	30 83       	st	Z, r19
 302:	31 97       	sbiw	r30, 0x01	; 1
 304:	30 e2       	ldi	r19, 0x20	; 32
 306:	30 83       	st	Z, r19
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	31 e2       	ldi	r19, 0x21	; 33
 30c:	30 83       	st	Z, r19
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	20 83       	st	Z, r18
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	23 e2       	ldi	r18, 0x23	; 35
 316:	20 83       	st	Z, r18
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	40 83       	st	Z, r20
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	50 83       	st	Z, r21
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	26 e2       	ldi	r18, 0x26	; 38
 324:	20 83       	st	Z, r18
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	27 e2       	ldi	r18, 0x27	; 39
 32a:	20 83       	st	Z, r18
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	28 e2       	ldi	r18, 0x28	; 40
 330:	20 83       	st	Z, r18
 332:	31 97       	sbiw	r30, 0x01	; 1
 334:	29 e2       	ldi	r18, 0x29	; 41
 336:	20 83       	st	Z, r18
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	20 e3       	ldi	r18, 0x30	; 48
 33c:	20 83       	st	Z, r18
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	21 e3       	ldi	r18, 0x31	; 49
 342:	20 83       	st	Z, r18
 344:	86 97       	sbiw	r24, 0x26	; 38
 346:	08 95       	ret

00000348 <xPortStartScheduler>:
 348:	85 df       	rcall	.-246    	; 0x254 <prvSetupTimerInterrupt>
 34a:	a0 91 7f 04 	lds	r26, 0x047F	; 0x80047f <pxCurrentTCB>
 34e:	b0 91 80 04 	lds	r27, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 352:	cd 91       	ld	r28, X+
 354:	cd bf       	out	0x3d, r28	; 61
 356:	dd 91       	ld	r29, X+
 358:	de bf       	out	0x3e, r29	; 62
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	7f 91       	pop	r23
 36c:	6f 91       	pop	r22
 36e:	5f 91       	pop	r21
 370:	4f 91       	pop	r20
 372:	3f 91       	pop	r19
 374:	2f 91       	pop	r18
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	df 90       	pop	r13
 380:	cf 90       	pop	r12
 382:	bf 90       	pop	r11
 384:	af 90       	pop	r10
 386:	9f 90       	pop	r9
 388:	8f 90       	pop	r8
 38a:	7f 90       	pop	r7
 38c:	6f 90       	pop	r6
 38e:	5f 90       	pop	r5
 390:	4f 90       	pop	r4
 392:	3f 90       	pop	r3
 394:	2f 90       	pop	r2
 396:	1f 90       	pop	r1
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	08 95       	ret
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	08 95       	ret

000003a4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	0f 92       	push	r0
 3ac:	1f 92       	push	r1
 3ae:	11 24       	eor	r1, r1
 3b0:	2f 92       	push	r2
 3b2:	3f 92       	push	r3
 3b4:	4f 92       	push	r4
 3b6:	5f 92       	push	r5
 3b8:	6f 92       	push	r6
 3ba:	7f 92       	push	r7
 3bc:	8f 92       	push	r8
 3be:	9f 92       	push	r9
 3c0:	af 92       	push	r10
 3c2:	bf 92       	push	r11
 3c4:	cf 92       	push	r12
 3c6:	df 92       	push	r13
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	2f 93       	push	r18
 3d2:	3f 93       	push	r19
 3d4:	4f 93       	push	r20
 3d6:	5f 93       	push	r21
 3d8:	6f 93       	push	r22
 3da:	7f 93       	push	r23
 3dc:	8f 93       	push	r24
 3de:	9f 93       	push	r25
 3e0:	af 93       	push	r26
 3e2:	bf 93       	push	r27
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	ef 93       	push	r30
 3ea:	ff 93       	push	r31
 3ec:	a0 91 7f 04 	lds	r26, 0x047F	; 0x80047f <pxCurrentTCB>
 3f0:	b0 91 80 04 	lds	r27, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 3f4:	0d b6       	in	r0, 0x3d	; 61
 3f6:	0d 92       	st	X+, r0
 3f8:	0e b6       	in	r0, 0x3e	; 62
 3fa:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 3fc:	11 d5       	rcall	.+2594   	; 0xe20 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 3fe:	a0 91 7f 04 	lds	r26, 0x047F	; 0x80047f <pxCurrentTCB>
 402:	b0 91 80 04 	lds	r27, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 406:	cd 91       	ld	r28, X+
 408:	cd bf       	out	0x3d, r28	; 61
 40a:	dd 91       	ld	r29, X+
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	ff 90       	pop	r15
 430:	ef 90       	pop	r14
 432:	df 90       	pop	r13
 434:	cf 90       	pop	r12
 436:	bf 90       	pop	r11
 438:	af 90       	pop	r10
 43a:	9f 90       	pop	r9
 43c:	8f 90       	pop	r8
 43e:	7f 90       	pop	r7
 440:	6f 90       	pop	r6
 442:	5f 90       	pop	r5
 444:	4f 90       	pop	r4
 446:	3f 90       	pop	r3
 448:	2f 90       	pop	r2
 44a:	1f 90       	pop	r1
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0

	asm volatile ( "ret" );
 452:	08 95       	ret

00000454 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 454:	0f 92       	push	r0
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	f8 94       	cli
 45a:	0f 92       	push	r0
 45c:	1f 92       	push	r1
 45e:	11 24       	eor	r1, r1
 460:	2f 92       	push	r2
 462:	3f 92       	push	r3
 464:	4f 92       	push	r4
 466:	5f 92       	push	r5
 468:	6f 92       	push	r6
 46a:	7f 92       	push	r7
 46c:	8f 92       	push	r8
 46e:	9f 92       	push	r9
 470:	af 92       	push	r10
 472:	bf 92       	push	r11
 474:	cf 92       	push	r12
 476:	df 92       	push	r13
 478:	ef 92       	push	r14
 47a:	ff 92       	push	r15
 47c:	0f 93       	push	r16
 47e:	1f 93       	push	r17
 480:	2f 93       	push	r18
 482:	3f 93       	push	r19
 484:	4f 93       	push	r20
 486:	5f 93       	push	r21
 488:	6f 93       	push	r22
 48a:	7f 93       	push	r23
 48c:	8f 93       	push	r24
 48e:	9f 93       	push	r25
 490:	af 93       	push	r26
 492:	bf 93       	push	r27
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	ef 93       	push	r30
 49a:	ff 93       	push	r31
 49c:	a0 91 7f 04 	lds	r26, 0x047F	; 0x80047f <pxCurrentTCB>
 4a0:	b0 91 80 04 	lds	r27, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 4a4:	0d b6       	in	r0, 0x3d	; 61
 4a6:	0d 92       	st	X+, r0
 4a8:	0e b6       	in	r0, 0x3e	; 62
 4aa:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 4ac:	01 d3       	rcall	.+1538   	; 0xab0 <xTaskIncrementTick>
 4ae:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 4b0:	b7 d4       	rcall	.+2414   	; 0xe20 <vTaskSwitchContext>
 4b2:	a0 91 7f 04 	lds	r26, 0x047F	; 0x80047f <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
 4b6:	b0 91 80 04 	lds	r27, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 4ba:	cd 91       	ld	r28, X+
 4bc:	cd bf       	out	0x3d, r28	; 61
 4be:	dd 91       	ld	r29, X+
 4c0:	de bf       	out	0x3e, r29	; 62
 4c2:	ff 91       	pop	r31
 4c4:	ef 91       	pop	r30
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	bf 91       	pop	r27
 4cc:	af 91       	pop	r26
 4ce:	9f 91       	pop	r25
 4d0:	8f 91       	pop	r24
 4d2:	7f 91       	pop	r23
 4d4:	6f 91       	pop	r22
 4d6:	5f 91       	pop	r21
 4d8:	4f 91       	pop	r20
 4da:	3f 91       	pop	r19
 4dc:	2f 91       	pop	r18
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	ff 90       	pop	r15
 4e4:	ef 90       	pop	r14
 4e6:	df 90       	pop	r13
 4e8:	cf 90       	pop	r12
 4ea:	bf 90       	pop	r11
 4ec:	af 90       	pop	r10
 4ee:	9f 90       	pop	r9
 4f0:	8f 90       	pop	r8
 4f2:	7f 90       	pop	r7
 4f4:	6f 90       	pop	r6
 4f6:	5f 90       	pop	r5
 4f8:	4f 90       	pop	r4
 4fa:	3f 90       	pop	r3
 4fc:	2f 90       	pop	r2
 4fe:	1f 90       	pop	r1
 500:	0f 90       	pop	r0
 502:	0f be       	out	0x3f, r0	; 63
 504:	0f 90       	pop	r0
 506:	08 95       	ret

00000508 <__vector_17>:

	asm volatile ( "ret" );
 508:	a5 df       	rcall	.-182    	; 0x454 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 50a:	18 95       	reti

0000050c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
 512:	ba d2       	rcall	.+1396   	; 0xa88 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 514:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
 518:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x1>
 51c:	89 2b       	or	r24, r25
 51e:	31 f4       	brne	.+12     	; 0x52c <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 520:	8f e0       	ldi	r24, 0x0F	; 15
 522:	92 e0       	ldi	r25, 0x02	; 2
 524:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__data_end+0x1>
 528:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 52c:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <xNextFreeByte>
 530:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <xNextFreeByte+0x1>
 534:	c9 01       	movw	r24, r18
 536:	8c 0f       	add	r24, r28
 538:	9d 1f       	adc	r25, r29
 53a:	83 3f       	cpi	r24, 0xF3	; 243
 53c:	41 e0       	ldi	r20, 0x01	; 1
 53e:	94 07       	cpc	r25, r20
 540:	70 f4       	brcc	.+28     	; 0x55e <pvPortMalloc+0x52>
 542:	28 17       	cp	r18, r24
 544:	39 07       	cpc	r19, r25
 546:	70 f4       	brcc	.+28     	; 0x564 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 548:	c0 91 0a 02 	lds	r28, 0x020A	; 0x80020a <__data_end>
 54c:	d0 91 0b 02 	lds	r29, 0x020B	; 0x80020b <__data_end+0x1>
 550:	c2 0f       	add	r28, r18
 552:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 554:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <xNextFreeByte+0x1>
 558:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <xNextFreeByte>
 55c:	05 c0       	rjmp	.+10     	; 0x568 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 55e:	c0 e0       	ldi	r28, 0x00	; 0
 560:	d0 e0       	ldi	r29, 0x00	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <pvPortMalloc+0x5c>
 564:	c0 e0       	ldi	r28, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 566:	d0 e0       	ldi	r29, 0x00	; 0
 568:	7d d3       	rcall	.+1786   	; 0xc64 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 56a:	ce 01       	movw	r24, r28
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 572:	08 95       	ret

00000574 <prvResetNextTaskUnblockTime>:
	vTaskSuspendAll();
	xPendedTicks += xTicksToCatchUp;
	xYieldRequired = xTaskResumeAll();

	return xYieldRequired;
}
 574:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <pxDelayedTaskList>
 578:	f0 91 3c 04 	lds	r31, 0x043C	; 0x80043c <pxDelayedTaskList+0x1>
 57c:	80 81       	ld	r24, Z
 57e:	81 11       	cpse	r24, r1
 580:	0c c0       	rjmp	.+24     	; 0x59a <prvResetNextTaskUnblockTime+0x26>
 582:	8f ef       	ldi	r24, 0xFF	; 255
 584:	9f ef       	ldi	r25, 0xFF	; 255
 586:	dc 01       	movw	r26, r24
 588:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <xNextTaskUnblockTime>
 58c:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <xNextTaskUnblockTime+0x1>
 590:	a0 93 07 04 	sts	0x0407, r26	; 0x800407 <xNextTaskUnblockTime+0x2>
 594:	b0 93 08 04 	sts	0x0408, r27	; 0x800408 <xNextTaskUnblockTime+0x3>
 598:	08 95       	ret
 59a:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <pxDelayedTaskList>
 59e:	f0 91 3c 04 	lds	r31, 0x043C	; 0x80043c <pxDelayedTaskList+0x1>
 5a2:	07 80       	ldd	r0, Z+7	; 0x07
 5a4:	f0 85       	ldd	r31, Z+8	; 0x08
 5a6:	e0 2d       	mov	r30, r0
 5a8:	00 84       	ldd	r0, Z+8	; 0x08
 5aa:	f1 85       	ldd	r31, Z+9	; 0x09
 5ac:	e0 2d       	mov	r30, r0
 5ae:	82 81       	ldd	r24, Z+2	; 0x02
 5b0:	93 81       	ldd	r25, Z+3	; 0x03
 5b2:	a4 81       	ldd	r26, Z+4	; 0x04
 5b4:	b5 81       	ldd	r27, Z+5	; 0x05
 5b6:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <xNextTaskUnblockTime>
 5ba:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <xNextTaskUnblockTime+0x1>
 5be:	a0 93 07 04 	sts	0x0407, r26	; 0x800407 <xNextTaskUnblockTime+0x2>
 5c2:	b0 93 08 04 	sts	0x0408, r27	; 0x800408 <xNextTaskUnblockTime+0x3>
 5c6:	08 95       	ret

000005c8 <prvDeleteTCB>:
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	ec 01       	movw	r28, r24
 5ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
 5d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
 5d2:	cf df       	rcall	.-98     	; 0x572 <vPortFree>
 5d4:	ce 01       	movw	r24, r28
 5d6:	cd df       	rcall	.-102    	; 0x572 <vPortFree>
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <prvInitialiseNewTask>:
 5de:	6f 92       	push	r6
 5e0:	7f 92       	push	r7
 5e2:	8f 92       	push	r8
 5e4:	9f 92       	push	r9
 5e6:	af 92       	push	r10
 5e8:	bf 92       	push	r11
 5ea:	cf 92       	push	r12
 5ec:	df 92       	push	r13
 5ee:	ef 92       	push	r14
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
 5fc:	4c 01       	movw	r8, r24
 5fe:	f5 01       	movw	r30, r10
 600:	83 8d       	ldd	r24, Z+27	; 0x1b
 602:	94 8d       	ldd	r25, Z+28	; 0x1c
 604:	21 50       	subi	r18, 0x01	; 1
 606:	31 09       	sbc	r19, r1
 608:	3c 01       	movw	r6, r24
 60a:	62 0e       	add	r6, r18
 60c:	73 1e       	adc	r7, r19
 60e:	61 15       	cp	r22, r1
 610:	71 05       	cpc	r23, r1
 612:	89 f4       	brne	.+34     	; 0x636 <prvInitialiseNewTask+0x58>
 614:	16 c0       	rjmp	.+44     	; 0x642 <prvInitialiseNewTask+0x64>
 616:	82 2f       	mov	r24, r18
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	fb 01       	movw	r30, r22
 61c:	e8 0f       	add	r30, r24
 61e:	f9 1f       	adc	r31, r25
 620:	30 81       	ld	r19, Z
 622:	d5 01       	movw	r26, r10
 624:	a8 0f       	add	r26, r24
 626:	b9 1f       	adc	r27, r25
 628:	5d 96       	adiw	r26, 0x1d	; 29
 62a:	3c 93       	st	X, r19
 62c:	80 81       	ld	r24, Z
 62e:	88 23       	and	r24, r24
 630:	29 f0       	breq	.+10     	; 0x63c <prvInitialiseNewTask+0x5e>
 632:	2f 5f       	subi	r18, 0xFF	; 255
 634:	01 c0       	rjmp	.+2      	; 0x638 <prvInitialiseNewTask+0x5a>
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	28 30       	cpi	r18, 0x08	; 8
 63a:	68 f3       	brcs	.-38     	; 0x616 <prvInitialiseNewTask+0x38>
 63c:	f5 01       	movw	r30, r10
 63e:	14 a2       	std	Z+36, r1	; 0x24
 640:	02 c0       	rjmp	.+4      	; 0x646 <prvInitialiseNewTask+0x68>
 642:	f5 01       	movw	r30, r10
 644:	15 8e       	std	Z+29, r1	; 0x1d
 646:	f3 e0       	ldi	r31, 0x03	; 3
 648:	fe 15       	cp	r31, r14
 64a:	20 f4       	brcc	.+8      	; 0x654 <prvInitialiseNewTask+0x76>
 64c:	0f 2e       	mov	r0, r31
 64e:	f3 e0       	ldi	r31, 0x03	; 3
 650:	ef 2e       	mov	r14, r31
 652:	f0 2d       	mov	r31, r0
 654:	f5 01       	movw	r30, r10
 656:	e2 8e       	std	Z+26, r14	; 0x1a
 658:	c5 01       	movw	r24, r10
 65a:	02 96       	adiw	r24, 0x02	; 2
 65c:	72 dd       	rcall	.-1308   	; 0x142 <vListInitialiseItem>
 65e:	c5 01       	movw	r24, r10
 660:	0e 96       	adiw	r24, 0x0e	; 14
 662:	6f dd       	rcall	.-1314   	; 0x142 <vListInitialiseItem>
 664:	f5 01       	movw	r30, r10
 666:	b3 86       	std	Z+11, r11	; 0x0b
 668:	a2 86       	std	Z+10, r10	; 0x0a
 66a:	84 e0       	ldi	r24, 0x04	; 4
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	a0 e0       	ldi	r26, 0x00	; 0
 670:	b0 e0       	ldi	r27, 0x00	; 0
 672:	8e 19       	sub	r24, r14
 674:	91 09       	sbc	r25, r1
 676:	a1 09       	sbc	r26, r1
 678:	b1 09       	sbc	r27, r1
 67a:	86 87       	std	Z+14, r24	; 0x0e
 67c:	97 87       	std	Z+15, r25	; 0x0f
 67e:	a0 8b       	std	Z+16, r26	; 0x10
 680:	b1 8b       	std	Z+17, r27	; 0x11
 682:	b7 8a       	std	Z+23, r11	; 0x17
 684:	a6 8a       	std	Z+22, r10	; 0x16
 686:	15 a2       	std	Z+37, r1	; 0x25
 688:	16 a2       	std	Z+38, r1	; 0x26
 68a:	17 a2       	std	Z+39, r1	; 0x27
 68c:	10 a6       	std	Z+40, r1	; 0x28
 68e:	11 a6       	std	Z+41, r1	; 0x29
 690:	a8 01       	movw	r20, r16
 692:	b4 01       	movw	r22, r8
 694:	c3 01       	movw	r24, r6
 696:	ec dd       	rcall	.-1064   	; 0x270 <pxPortInitialiseStack>
 698:	f5 01       	movw	r30, r10
 69a:	91 83       	std	Z+1, r25	; 0x01
 69c:	80 83       	st	Z, r24
 69e:	c1 14       	cp	r12, r1
 6a0:	d1 04       	cpc	r13, r1
 6a2:	19 f0       	breq	.+6      	; 0x6aa <prvInitialiseNewTask+0xcc>
 6a4:	f6 01       	movw	r30, r12
 6a6:	b1 82       	std	Z+1, r11	; 0x01
 6a8:	a0 82       	st	Z, r10
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	0f 91       	pop	r16
 6b2:	ef 90       	pop	r14
 6b4:	df 90       	pop	r13
 6b6:	cf 90       	pop	r12
 6b8:	bf 90       	pop	r11
 6ba:	af 90       	pop	r10
 6bc:	9f 90       	pop	r9
 6be:	8f 90       	pop	r8
 6c0:	7f 90       	pop	r7
 6c2:	6f 90       	pop	r6
 6c4:	08 95       	ret

000006c6 <prvInitialiseTaskLists>:
 6c6:	cf 93       	push	r28
 6c8:	c0 e0       	ldi	r28, 0x00	; 0
 6ca:	08 c0       	rjmp	.+16     	; 0x6dc <prvInitialiseTaskLists+0x16>
 6cc:	2b e0       	ldi	r18, 0x0B	; 11
 6ce:	c2 9f       	mul	r28, r18
 6d0:	c0 01       	movw	r24, r0
 6d2:	11 24       	eor	r1, r1
 6d4:	8d 5a       	subi	r24, 0xAD	; 173
 6d6:	9b 4f       	sbci	r25, 0xFB	; 251
 6d8:	23 dd       	rcall	.-1466   	; 0x120 <vListInitialise>
 6da:	cf 5f       	subi	r28, 0xFF	; 255
 6dc:	c4 30       	cpi	r28, 0x04	; 4
 6de:	b0 f3       	brcs	.-20     	; 0x6cc <prvInitialiseTaskLists+0x6>
 6e0:	88 e4       	ldi	r24, 0x48	; 72
 6e2:	94 e0       	ldi	r25, 0x04	; 4
 6e4:	1d dd       	rcall	.-1478   	; 0x120 <vListInitialise>
 6e6:	8d e3       	ldi	r24, 0x3D	; 61
 6e8:	94 e0       	ldi	r25, 0x04	; 4
 6ea:	1a dd       	rcall	.-1484   	; 0x120 <vListInitialise>
 6ec:	8e e2       	ldi	r24, 0x2E	; 46
 6ee:	94 e0       	ldi	r25, 0x04	; 4
 6f0:	17 dd       	rcall	.-1490   	; 0x120 <vListInitialise>
 6f2:	83 e2       	ldi	r24, 0x23	; 35
 6f4:	94 e0       	ldi	r25, 0x04	; 4
 6f6:	14 dd       	rcall	.-1496   	; 0x120 <vListInitialise>
 6f8:	87 e1       	ldi	r24, 0x17	; 23
 6fa:	94 e0       	ldi	r25, 0x04	; 4
 6fc:	11 dd       	rcall	.-1502   	; 0x120 <vListInitialise>
 6fe:	88 e4       	ldi	r24, 0x48	; 72
 700:	94 e0       	ldi	r25, 0x04	; 4
 702:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <pxDelayedTaskList+0x1>
 706:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <pxDelayedTaskList>
 70a:	8d e3       	ldi	r24, 0x3D	; 61
 70c:	94 e0       	ldi	r25, 0x04	; 4
 70e:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <pxOverflowDelayedTaskList+0x1>
 712:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <pxOverflowDelayedTaskList>
 716:	cf 91       	pop	r28
 718:	08 95       	ret

0000071a <prvAddNewTaskToReadyList>:
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	ec 01       	movw	r28, r24
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	f8 94       	cli
 724:	0f 92       	push	r0
 726:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <uxCurrentNumberOfTasks>
 72a:	8f 5f       	subi	r24, 0xFF	; 255
 72c:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <uxCurrentNumberOfTasks>
 730:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <pxCurrentTCB>
 734:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 738:	89 2b       	or	r24, r25
 73a:	51 f4       	brne	.+20     	; 0x750 <prvAddNewTaskToReadyList+0x36>
 73c:	d0 93 80 04 	sts	0x0480, r29	; 0x800480 <pxCurrentTCB+0x1>
 740:	c0 93 7f 04 	sts	0x047F, r28	; 0x80047f <pxCurrentTCB>
 744:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <uxCurrentNumberOfTasks>
 748:	81 30       	cpi	r24, 0x01	; 1
 74a:	91 f4       	brne	.+36     	; 0x770 <prvAddNewTaskToReadyList+0x56>
 74c:	bc df       	rcall	.-136    	; 0x6c6 <prvInitialiseTaskLists>
 74e:	10 c0       	rjmp	.+32     	; 0x770 <prvAddNewTaskToReadyList+0x56>
 750:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <xSchedulerRunning>
 754:	81 11       	cpse	r24, r1
 756:	0c c0       	rjmp	.+24     	; 0x770 <prvAddNewTaskToReadyList+0x56>
 758:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <pxCurrentTCB>
 75c:	f0 91 80 04 	lds	r31, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 760:	92 8d       	ldd	r25, Z+26	; 0x1a
 762:	8a 8d       	ldd	r24, Y+26	; 0x1a
 764:	89 17       	cp	r24, r25
 766:	20 f0       	brcs	.+8      	; 0x770 <prvAddNewTaskToReadyList+0x56>
 768:	d0 93 80 04 	sts	0x0480, r29	; 0x800480 <pxCurrentTCB+0x1>
 76c:	c0 93 7f 04 	sts	0x047F, r28	; 0x80047f <pxCurrentTCB>
 770:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <uxTaskNumber>
 774:	8f 5f       	subi	r24, 0xFF	; 255
 776:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <uxTaskNumber>
 77a:	8a 8d       	ldd	r24, Y+26	; 0x1a
 77c:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <uxTopReadyPriority>
 780:	98 17       	cp	r25, r24
 782:	10 f4       	brcc	.+4      	; 0x788 <prvAddNewTaskToReadyList+0x6e>
 784:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <uxTopReadyPriority>
 788:	2b e0       	ldi	r18, 0x0B	; 11
 78a:	82 9f       	mul	r24, r18
 78c:	c0 01       	movw	r24, r0
 78e:	11 24       	eor	r1, r1
 790:	be 01       	movw	r22, r28
 792:	6e 5f       	subi	r22, 0xFE	; 254
 794:	7f 4f       	sbci	r23, 0xFF	; 255
 796:	8d 5a       	subi	r24, 0xAD	; 173
 798:	9b 4f       	sbci	r25, 0xFB	; 251
 79a:	d7 dc       	rcall	.-1618   	; 0x14a <vListInsertEnd>
 79c:	0f 90       	pop	r0
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <xSchedulerRunning>
 7a4:	88 23       	and	r24, r24
 7a6:	49 f0       	breq	.+18     	; 0x7ba <prvAddNewTaskToReadyList+0xa0>
 7a8:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <pxCurrentTCB>
 7ac:	f0 91 80 04 	lds	r31, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 7b0:	92 8d       	ldd	r25, Z+26	; 0x1a
 7b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
 7b4:	98 17       	cp	r25, r24
 7b6:	08 f4       	brcc	.+2      	; 0x7ba <prvAddNewTaskToReadyList+0xa0>
 7b8:	f5 dd       	rcall	.-1046   	; 0x3a4 <vPortYield>
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	08 95       	ret

000007c0 <prvCheckTasksWaitingTermination>:
 7c0:	cf 93       	push	r28
 7c2:	df 93       	push	r29
 7c4:	1a c0       	rjmp	.+52     	; 0x7fa <prvCheckTasksWaitingTermination+0x3a>
 7c6:	0f b6       	in	r0, 0x3f	; 63
 7c8:	f8 94       	cli
 7ca:	0f 92       	push	r0
 7cc:	e0 91 2a 04 	lds	r30, 0x042A	; 0x80042a <xTasksWaitingTermination+0x7>
 7d0:	f0 91 2b 04 	lds	r31, 0x042B	; 0x80042b <xTasksWaitingTermination+0x8>
 7d4:	c0 85       	ldd	r28, Z+8	; 0x08
 7d6:	d1 85       	ldd	r29, Z+9	; 0x09
 7d8:	ce 01       	movw	r24, r28
 7da:	02 96       	adiw	r24, 0x02	; 2
 7dc:	14 dd       	rcall	.-1496   	; 0x206 <uxListRemove>
 7de:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <uxCurrentNumberOfTasks>
 7e2:	81 50       	subi	r24, 0x01	; 1
 7e4:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <uxCurrentNumberOfTasks>
 7e8:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <uxDeletedTasksWaitingCleanUp>
 7ec:	81 50       	subi	r24, 0x01	; 1
 7ee:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <uxDeletedTasksWaitingCleanUp>
 7f2:	0f 90       	pop	r0
 7f4:	0f be       	out	0x3f, r0	; 63
 7f6:	ce 01       	movw	r24, r28
 7f8:	e7 de       	rcall	.-562    	; 0x5c8 <prvDeleteTCB>
 7fa:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <uxDeletedTasksWaitingCleanUp>
 7fe:	81 11       	cpse	r24, r1
 800:	e2 cf       	rjmp	.-60     	; 0x7c6 <prvCheckTasksWaitingTermination+0x6>
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	08 95       	ret

00000808 <prvIdleTask>:
 808:	db df       	rcall	.-74     	; 0x7c0 <prvCheckTasksWaitingTermination>
 80a:	fe cf       	rjmp	.-4      	; 0x808 <prvIdleTask>

0000080c <prvAddCurrentTaskToDelayedList>:
 80c:	8f 92       	push	r8
 80e:	9f 92       	push	r9
 810:	af 92       	push	r10
 812:	bf 92       	push	r11
 814:	cf 92       	push	r12
 816:	df 92       	push	r13
 818:	ef 92       	push	r14
 81a:	ff 92       	push	r15
 81c:	cf 93       	push	r28
 81e:	6b 01       	movw	r12, r22
 820:	7c 01       	movw	r14, r24
 822:	c4 2f       	mov	r28, r20
 824:	80 90 12 04 	lds	r8, 0x0412	; 0x800412 <xTickCount>
 828:	90 90 13 04 	lds	r9, 0x0413	; 0x800413 <xTickCount+0x1>
 82c:	a0 90 14 04 	lds	r10, 0x0414	; 0x800414 <xTickCount+0x2>
 830:	b0 90 15 04 	lds	r11, 0x0415	; 0x800415 <xTickCount+0x3>
 834:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <pxCurrentTCB>
 838:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 83c:	02 96       	adiw	r24, 0x02	; 2
 83e:	e3 dc       	rcall	.-1594   	; 0x206 <uxListRemove>
 840:	8f ef       	ldi	r24, 0xFF	; 255
 842:	c8 16       	cp	r12, r24
 844:	d8 06       	cpc	r13, r24
 846:	e8 06       	cpc	r14, r24
 848:	f8 06       	cpc	r15, r24
 84a:	61 f4       	brne	.+24     	; 0x864 <prvAddCurrentTaskToDelayedList+0x58>
 84c:	cc 23       	and	r28, r28
 84e:	51 f0       	breq	.+20     	; 0x864 <prvAddCurrentTaskToDelayedList+0x58>
 850:	60 91 7f 04 	lds	r22, 0x047F	; 0x80047f <pxCurrentTCB>
 854:	70 91 80 04 	lds	r23, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 858:	6e 5f       	subi	r22, 0xFE	; 254
 85a:	7f 4f       	sbci	r23, 0xFF	; 255
 85c:	87 e1       	ldi	r24, 0x17	; 23
 85e:	94 e0       	ldi	r25, 0x04	; 4
 860:	74 dc       	rcall	.-1816   	; 0x14a <vListInsertEnd>
 862:	3d c0       	rjmp	.+122    	; 0x8de <prvAddCurrentTaskToDelayedList+0xd2>
 864:	c8 0c       	add	r12, r8
 866:	d9 1c       	adc	r13, r9
 868:	ea 1c       	adc	r14, r10
 86a:	fb 1c       	adc	r15, r11
 86c:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <pxCurrentTCB>
 870:	f0 91 80 04 	lds	r31, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 874:	c2 82       	std	Z+2, r12	; 0x02
 876:	d3 82       	std	Z+3, r13	; 0x03
 878:	e4 82       	std	Z+4, r14	; 0x04
 87a:	f5 82       	std	Z+5, r15	; 0x05
 87c:	c8 14       	cp	r12, r8
 87e:	d9 04       	cpc	r13, r9
 880:	ea 04       	cpc	r14, r10
 882:	fb 04       	cpc	r15, r11
 884:	60 f4       	brcc	.+24     	; 0x89e <prvAddCurrentTaskToDelayedList+0x92>
 886:	60 91 7f 04 	lds	r22, 0x047F	; 0x80047f <pxCurrentTCB>
 88a:	70 91 80 04 	lds	r23, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 88e:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <pxOverflowDelayedTaskList>
 892:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <pxOverflowDelayedTaskList+0x1>
 896:	6e 5f       	subi	r22, 0xFE	; 254
 898:	7f 4f       	sbci	r23, 0xFF	; 255
 89a:	78 dc       	rcall	.-1808   	; 0x18c <vListInsert>
 89c:	20 c0       	rjmp	.+64     	; 0x8de <prvAddCurrentTaskToDelayedList+0xd2>
 89e:	60 91 7f 04 	lds	r22, 0x047F	; 0x80047f <pxCurrentTCB>
 8a2:	70 91 80 04 	lds	r23, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 8a6:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <pxDelayedTaskList>
 8aa:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <pxDelayedTaskList+0x1>
 8ae:	6e 5f       	subi	r22, 0xFE	; 254
 8b0:	7f 4f       	sbci	r23, 0xFF	; 255
 8b2:	6c dc       	rcall	.-1832   	; 0x18c <vListInsert>
 8b4:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <xNextTaskUnblockTime>
 8b8:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <xNextTaskUnblockTime+0x1>
 8bc:	a0 91 07 04 	lds	r26, 0x0407	; 0x800407 <xNextTaskUnblockTime+0x2>
 8c0:	b0 91 08 04 	lds	r27, 0x0408	; 0x800408 <xNextTaskUnblockTime+0x3>
 8c4:	c8 16       	cp	r12, r24
 8c6:	d9 06       	cpc	r13, r25
 8c8:	ea 06       	cpc	r14, r26
 8ca:	fb 06       	cpc	r15, r27
 8cc:	40 f4       	brcc	.+16     	; 0x8de <prvAddCurrentTaskToDelayedList+0xd2>
 8ce:	c0 92 05 04 	sts	0x0405, r12	; 0x800405 <xNextTaskUnblockTime>
 8d2:	d0 92 06 04 	sts	0x0406, r13	; 0x800406 <xNextTaskUnblockTime+0x1>
 8d6:	e0 92 07 04 	sts	0x0407, r14	; 0x800407 <xNextTaskUnblockTime+0x2>
 8da:	f0 92 08 04 	sts	0x0408, r15	; 0x800408 <xNextTaskUnblockTime+0x3>
 8de:	cf 91       	pop	r28
 8e0:	ff 90       	pop	r15
 8e2:	ef 90       	pop	r14
 8e4:	df 90       	pop	r13
 8e6:	cf 90       	pop	r12
 8e8:	bf 90       	pop	r11
 8ea:	af 90       	pop	r10
 8ec:	9f 90       	pop	r9
 8ee:	8f 90       	pop	r8
 8f0:	08 95       	ret

000008f2 <xTaskCreate>:
 8f2:	2f 92       	push	r2
 8f4:	3f 92       	push	r3
 8f6:	4f 92       	push	r4
 8f8:	5f 92       	push	r5
 8fa:	6f 92       	push	r6
 8fc:	7f 92       	push	r7
 8fe:	8f 92       	push	r8
 900:	9f 92       	push	r9
 902:	af 92       	push	r10
 904:	bf 92       	push	r11
 906:	cf 92       	push	r12
 908:	df 92       	push	r13
 90a:	ef 92       	push	r14
 90c:	ff 92       	push	r15
 90e:	0f 93       	push	r16
 910:	1f 93       	push	r17
 912:	cf 93       	push	r28
 914:	df 93       	push	r29
 916:	3c 01       	movw	r6, r24
 918:	1b 01       	movw	r2, r22
 91a:	5a 01       	movw	r10, r20
 91c:	29 01       	movw	r4, r18
 91e:	ca 01       	movw	r24, r20
 920:	f5 dd       	rcall	.-1046   	; 0x50c <pvPortMalloc>
 922:	6c 01       	movw	r12, r24
 924:	89 2b       	or	r24, r25
 926:	61 f0       	breq	.+24     	; 0x940 <xTaskCreate+0x4e>
 928:	8a e2       	ldi	r24, 0x2A	; 42
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	ef dd       	rcall	.-1058   	; 0x50c <pvPortMalloc>
 92e:	ec 01       	movw	r28, r24
 930:	89 2b       	or	r24, r25
 932:	19 f0       	breq	.+6      	; 0x93a <xTaskCreate+0x48>
 934:	dc 8e       	std	Y+28, r13	; 0x1c
 936:	cb 8e       	std	Y+27, r12	; 0x1b
 938:	05 c0       	rjmp	.+10     	; 0x944 <xTaskCreate+0x52>
 93a:	c6 01       	movw	r24, r12
 93c:	1a de       	rcall	.-972    	; 0x572 <vPortFree>
 93e:	02 c0       	rjmp	.+4      	; 0x944 <xTaskCreate+0x52>
 940:	c0 e0       	ldi	r28, 0x00	; 0
 942:	d0 e0       	ldi	r29, 0x00	; 0
 944:	20 97       	sbiw	r28, 0x00	; 0
 946:	81 f0       	breq	.+32     	; 0x968 <xTaskCreate+0x76>
 948:	95 01       	movw	r18, r10
 94a:	40 e0       	ldi	r20, 0x00	; 0
 94c:	50 e0       	ldi	r21, 0x00	; 0
 94e:	81 2c       	mov	r8, r1
 950:	91 2c       	mov	r9, r1
 952:	5e 01       	movw	r10, r28
 954:	67 01       	movw	r12, r14
 956:	e0 2e       	mov	r14, r16
 958:	82 01       	movw	r16, r4
 95a:	b1 01       	movw	r22, r2
 95c:	c3 01       	movw	r24, r6
 95e:	3f de       	rcall	.-898    	; 0x5de <prvInitialiseNewTask>
 960:	ce 01       	movw	r24, r28
 962:	db de       	rcall	.-586    	; 0x71a <prvAddNewTaskToReadyList>
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	01 c0       	rjmp	.+2      	; 0x96a <xTaskCreate+0x78>
 968:	8f ef       	ldi	r24, 0xFF	; 255
 96a:	df 91       	pop	r29
 96c:	cf 91       	pop	r28
 96e:	1f 91       	pop	r17
 970:	0f 91       	pop	r16
 972:	ff 90       	pop	r15
 974:	ef 90       	pop	r14
 976:	df 90       	pop	r13
 978:	cf 90       	pop	r12
 97a:	bf 90       	pop	r11
 97c:	af 90       	pop	r10
 97e:	9f 90       	pop	r9
 980:	8f 90       	pop	r8
 982:	7f 90       	pop	r7
 984:	6f 90       	pop	r6
 986:	5f 90       	pop	r5
 988:	4f 90       	pop	r4
 98a:	3f 90       	pop	r3
 98c:	2f 90       	pop	r2
 98e:	08 95       	ret

00000990 <vTaskDelete>:
 990:	0f 93       	push	r16
 992:	1f 93       	push	r17
 994:	cf 93       	push	r28
 996:	df 93       	push	r29
 998:	ec 01       	movw	r28, r24
 99a:	0f b6       	in	r0, 0x3f	; 63
 99c:	f8 94       	cli
 99e:	0f 92       	push	r0
 9a0:	89 2b       	or	r24, r25
 9a2:	21 f4       	brne	.+8      	; 0x9ac <vTaskDelete+0x1c>
 9a4:	c0 91 7f 04 	lds	r28, 0x047F	; 0x80047f <pxCurrentTCB>
 9a8:	d0 91 80 04 	lds	r29, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 9ac:	8e 01       	movw	r16, r28
 9ae:	0e 5f       	subi	r16, 0xFE	; 254
 9b0:	1f 4f       	sbci	r17, 0xFF	; 255
 9b2:	c8 01       	movw	r24, r16
 9b4:	28 dc       	rcall	.-1968   	; 0x206 <uxListRemove>
 9b6:	88 8d       	ldd	r24, Y+24	; 0x18
 9b8:	99 8d       	ldd	r25, Y+25	; 0x19
 9ba:	89 2b       	or	r24, r25
 9bc:	19 f0       	breq	.+6      	; 0x9c4 <vTaskDelete+0x34>
 9be:	ce 01       	movw	r24, r28
 9c0:	0e 96       	adiw	r24, 0x0e	; 14
 9c2:	21 dc       	rcall	.-1982   	; 0x206 <uxListRemove>
 9c4:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <uxTaskNumber>
 9c8:	8f 5f       	subi	r24, 0xFF	; 255
 9ca:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <uxTaskNumber>
 9ce:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <pxCurrentTCB>
 9d2:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 9d6:	c8 17       	cp	r28, r24
 9d8:	d9 07       	cpc	r29, r25
 9da:	51 f4       	brne	.+20     	; 0x9f0 <vTaskDelete+0x60>
 9dc:	b8 01       	movw	r22, r16
 9de:	83 e2       	ldi	r24, 0x23	; 35
 9e0:	94 e0       	ldi	r25, 0x04	; 4
 9e2:	b3 db       	rcall	.-2202   	; 0x14a <vListInsertEnd>
 9e4:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <uxDeletedTasksWaitingCleanUp>
 9e8:	8f 5f       	subi	r24, 0xFF	; 255
 9ea:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <uxDeletedTasksWaitingCleanUp>
 9ee:	08 c0       	rjmp	.+16     	; 0xa00 <vTaskDelete+0x70>
 9f0:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <uxCurrentNumberOfTasks>
 9f4:	81 50       	subi	r24, 0x01	; 1
 9f6:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <uxCurrentNumberOfTasks>
 9fa:	ce 01       	movw	r24, r28
 9fc:	e5 dd       	rcall	.-1078   	; 0x5c8 <prvDeleteTCB>
 9fe:	ba dd       	rcall	.-1164   	; 0x574 <prvResetNextTaskUnblockTime>
 a00:	0f 90       	pop	r0
 a02:	0f be       	out	0x3f, r0	; 63
 a04:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <xSchedulerRunning>
 a08:	88 23       	and	r24, r24
 a0a:	41 f0       	breq	.+16     	; 0xa1c <vTaskDelete+0x8c>
 a0c:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <pxCurrentTCB>
 a10:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 a14:	c8 17       	cp	r28, r24
 a16:	d9 07       	cpc	r29, r25
 a18:	09 f4       	brne	.+2      	; 0xa1c <vTaskDelete+0x8c>
 a1a:	c4 dc       	rcall	.-1656   	; 0x3a4 <vPortYield>
 a1c:	df 91       	pop	r29
 a1e:	cf 91       	pop	r28
 a20:	1f 91       	pop	r17
 a22:	0f 91       	pop	r16
 a24:	08 95       	ret

00000a26 <vTaskStartScheduler>:
 a26:	ef 92       	push	r14
 a28:	ff 92       	push	r15
 a2a:	0f 93       	push	r16
 a2c:	0f 2e       	mov	r0, r31
 a2e:	f3 e0       	ldi	r31, 0x03	; 3
 a30:	ef 2e       	mov	r14, r31
 a32:	f4 e0       	ldi	r31, 0x04	; 4
 a34:	ff 2e       	mov	r15, r31
 a36:	f0 2d       	mov	r31, r0
 a38:	00 e0       	ldi	r16, 0x00	; 0
 a3a:	20 e0       	ldi	r18, 0x00	; 0
 a3c:	30 e0       	ldi	r19, 0x00	; 0
 a3e:	45 e5       	ldi	r20, 0x55	; 85
 a40:	50 e0       	ldi	r21, 0x00	; 0
 a42:	60 e0       	ldi	r22, 0x00	; 0
 a44:	72 e0       	ldi	r23, 0x02	; 2
 a46:	84 e0       	ldi	r24, 0x04	; 4
 a48:	94 e0       	ldi	r25, 0x04	; 4
 a4a:	53 df       	rcall	.-346    	; 0x8f2 <xTaskCreate>
 a4c:	81 30       	cpi	r24, 0x01	; 1
 a4e:	c1 f4       	brne	.+48     	; 0xa80 <vTaskStartScheduler+0x5a>
 a50:	f8 94       	cli
 a52:	8f ef       	ldi	r24, 0xFF	; 255
 a54:	9f ef       	ldi	r25, 0xFF	; 255
 a56:	dc 01       	movw	r26, r24
 a58:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <xNextTaskUnblockTime>
 a5c:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <xNextTaskUnblockTime+0x1>
 a60:	a0 93 07 04 	sts	0x0407, r26	; 0x800407 <xNextTaskUnblockTime+0x2>
 a64:	b0 93 08 04 	sts	0x0408, r27	; 0x800408 <xNextTaskUnblockTime+0x3>
 a68:	81 e0       	ldi	r24, 0x01	; 1
 a6a:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <xSchedulerRunning>
 a6e:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <xTickCount>
 a72:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <xTickCount+0x1>
 a76:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <xTickCount+0x2>
 a7a:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <xTickCount+0x3>
 a7e:	64 dc       	rcall	.-1848   	; 0x348 <xPortStartScheduler>
 a80:	0f 91       	pop	r16
 a82:	ff 90       	pop	r15
 a84:	ef 90       	pop	r14
 a86:	08 95       	ret

00000a88 <vTaskSuspendAll>:
 a88:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <uxSchedulerSuspended>
 a8c:	8f 5f       	subi	r24, 0xFF	; 255
 a8e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <uxSchedulerSuspended>
 a92:	08 95       	ret

00000a94 <xTaskGetTickCount>:
 a94:	0f b6       	in	r0, 0x3f	; 63
 a96:	f8 94       	cli
 a98:	0f 92       	push	r0
 a9a:	60 91 12 04 	lds	r22, 0x0412	; 0x800412 <xTickCount>
 a9e:	70 91 13 04 	lds	r23, 0x0413	; 0x800413 <xTickCount+0x1>
 aa2:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <xTickCount+0x2>
 aa6:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <xTickCount+0x3>
 aaa:	0f 90       	pop	r0
 aac:	0f be       	out	0x3f, r0	; 63
 aae:	08 95       	ret

00000ab0 <xTaskIncrementTick>:
 ab0:	bf 92       	push	r11
 ab2:	cf 92       	push	r12
 ab4:	df 92       	push	r13
 ab6:	ef 92       	push	r14
 ab8:	ff 92       	push	r15
 aba:	0f 93       	push	r16
 abc:	1f 93       	push	r17
 abe:	cf 93       	push	r28
 ac0:	df 93       	push	r29
 ac2:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <uxSchedulerSuspended>
 ac6:	81 11       	cpse	r24, r1
 ac8:	ab c0       	rjmp	.+342    	; 0xc20 <xTaskIncrementTick+0x170>
 aca:	c0 90 12 04 	lds	r12, 0x0412	; 0x800412 <xTickCount>
 ace:	d0 90 13 04 	lds	r13, 0x0413	; 0x800413 <xTickCount+0x1>
 ad2:	e0 90 14 04 	lds	r14, 0x0414	; 0x800414 <xTickCount+0x2>
 ad6:	f0 90 15 04 	lds	r15, 0x0415	; 0x800415 <xTickCount+0x3>
 ada:	2f ef       	ldi	r18, 0xFF	; 255
 adc:	c2 1a       	sub	r12, r18
 ade:	d2 0a       	sbc	r13, r18
 ae0:	e2 0a       	sbc	r14, r18
 ae2:	f2 0a       	sbc	r15, r18
 ae4:	c0 92 12 04 	sts	0x0412, r12	; 0x800412 <xTickCount>
 ae8:	d0 92 13 04 	sts	0x0413, r13	; 0x800413 <xTickCount+0x1>
 aec:	e0 92 14 04 	sts	0x0414, r14	; 0x800414 <xTickCount+0x2>
 af0:	f0 92 15 04 	sts	0x0415, r15	; 0x800415 <xTickCount+0x3>
 af4:	c1 14       	cp	r12, r1
 af6:	d1 04       	cpc	r13, r1
 af8:	e1 04       	cpc	r14, r1
 afa:	f1 04       	cpc	r15, r1
 afc:	b1 f4       	brne	.+44     	; 0xb2a <xTaskIncrementTick+0x7a>
 afe:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <pxDelayedTaskList>
 b02:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <pxDelayedTaskList+0x1>
 b06:	20 91 39 04 	lds	r18, 0x0439	; 0x800439 <pxOverflowDelayedTaskList>
 b0a:	30 91 3a 04 	lds	r19, 0x043A	; 0x80043a <pxOverflowDelayedTaskList+0x1>
 b0e:	30 93 3c 04 	sts	0x043C, r19	; 0x80043c <pxDelayedTaskList+0x1>
 b12:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <pxDelayedTaskList>
 b16:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <pxOverflowDelayedTaskList+0x1>
 b1a:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <pxOverflowDelayedTaskList>
 b1e:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <xNumOfOverflows>
 b22:	8f 5f       	subi	r24, 0xFF	; 255
 b24:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <xNumOfOverflows>
 b28:	25 dd       	rcall	.-1462   	; 0x574 <prvResetNextTaskUnblockTime>
 b2a:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <xNextTaskUnblockTime>
 b2e:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <xNextTaskUnblockTime+0x1>
 b32:	a0 91 07 04 	lds	r26, 0x0407	; 0x800407 <xNextTaskUnblockTime+0x2>
 b36:	b0 91 08 04 	lds	r27, 0x0408	; 0x800408 <xNextTaskUnblockTime+0x3>
 b3a:	c8 16       	cp	r12, r24
 b3c:	d9 06       	cpc	r13, r25
 b3e:	ea 06       	cpc	r14, r26
 b40:	fb 06       	cpc	r15, r27
 b42:	28 f4       	brcc	.+10     	; 0xb4e <xTaskIncrementTick+0x9e>
 b44:	b1 2c       	mov	r11, r1
 b46:	57 c0       	rjmp	.+174    	; 0xbf6 <xTaskIncrementTick+0x146>
 b48:	bb 24       	eor	r11, r11
 b4a:	b3 94       	inc	r11
 b4c:	01 c0       	rjmp	.+2      	; 0xb50 <xTaskIncrementTick+0xa0>
 b4e:	b1 2c       	mov	r11, r1
 b50:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <pxDelayedTaskList>
 b54:	f0 91 3c 04 	lds	r31, 0x043C	; 0x80043c <pxDelayedTaskList+0x1>
 b58:	80 81       	ld	r24, Z
 b5a:	81 11       	cpse	r24, r1
 b5c:	0c c0       	rjmp	.+24     	; 0xb76 <xTaskIncrementTick+0xc6>
 b5e:	8f ef       	ldi	r24, 0xFF	; 255
 b60:	9f ef       	ldi	r25, 0xFF	; 255
 b62:	dc 01       	movw	r26, r24
 b64:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <xNextTaskUnblockTime>
 b68:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <xNextTaskUnblockTime+0x1>
 b6c:	a0 93 07 04 	sts	0x0407, r26	; 0x800407 <xNextTaskUnblockTime+0x2>
 b70:	b0 93 08 04 	sts	0x0408, r27	; 0x800408 <xNextTaskUnblockTime+0x3>
 b74:	40 c0       	rjmp	.+128    	; 0xbf6 <xTaskIncrementTick+0x146>
 b76:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <pxDelayedTaskList>
 b7a:	f0 91 3c 04 	lds	r31, 0x043C	; 0x80043c <pxDelayedTaskList+0x1>
 b7e:	07 80       	ldd	r0, Z+7	; 0x07
 b80:	f0 85       	ldd	r31, Z+8	; 0x08
 b82:	e0 2d       	mov	r30, r0
 b84:	c0 85       	ldd	r28, Z+8	; 0x08
 b86:	d1 85       	ldd	r29, Z+9	; 0x09
 b88:	8a 81       	ldd	r24, Y+2	; 0x02
 b8a:	9b 81       	ldd	r25, Y+3	; 0x03
 b8c:	ac 81       	ldd	r26, Y+4	; 0x04
 b8e:	bd 81       	ldd	r27, Y+5	; 0x05
 b90:	c8 16       	cp	r12, r24
 b92:	d9 06       	cpc	r13, r25
 b94:	ea 06       	cpc	r14, r26
 b96:	fb 06       	cpc	r15, r27
 b98:	48 f4       	brcc	.+18     	; 0xbac <xTaskIncrementTick+0xfc>
 b9a:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <xNextTaskUnblockTime>
 b9e:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <xNextTaskUnblockTime+0x1>
 ba2:	a0 93 07 04 	sts	0x0407, r26	; 0x800407 <xNextTaskUnblockTime+0x2>
 ba6:	b0 93 08 04 	sts	0x0408, r27	; 0x800408 <xNextTaskUnblockTime+0x3>
 baa:	25 c0       	rjmp	.+74     	; 0xbf6 <xTaskIncrementTick+0x146>
 bac:	8e 01       	movw	r16, r28
 bae:	0e 5f       	subi	r16, 0xFE	; 254
 bb0:	1f 4f       	sbci	r17, 0xFF	; 255
 bb2:	c8 01       	movw	r24, r16
 bb4:	28 db       	rcall	.-2480   	; 0x206 <uxListRemove>
 bb6:	88 8d       	ldd	r24, Y+24	; 0x18
 bb8:	99 8d       	ldd	r25, Y+25	; 0x19
 bba:	89 2b       	or	r24, r25
 bbc:	19 f0       	breq	.+6      	; 0xbc4 <xTaskIncrementTick+0x114>
 bbe:	ce 01       	movw	r24, r28
 bc0:	0e 96       	adiw	r24, 0x0e	; 14
 bc2:	21 db       	rcall	.-2494   	; 0x206 <uxListRemove>
 bc4:	8a 8d       	ldd	r24, Y+26	; 0x1a
 bc6:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <uxTopReadyPriority>
 bca:	98 17       	cp	r25, r24
 bcc:	10 f4       	brcc	.+4      	; 0xbd2 <xTaskIncrementTick+0x122>
 bce:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <uxTopReadyPriority>
 bd2:	2b e0       	ldi	r18, 0x0B	; 11
 bd4:	82 9f       	mul	r24, r18
 bd6:	c0 01       	movw	r24, r0
 bd8:	11 24       	eor	r1, r1
 bda:	b8 01       	movw	r22, r16
 bdc:	8d 5a       	subi	r24, 0xAD	; 173
 bde:	9b 4f       	sbci	r25, 0xFB	; 251
 be0:	b4 da       	rcall	.-2712   	; 0x14a <vListInsertEnd>
 be2:	9a 8d       	ldd	r25, Y+26	; 0x1a
 be4:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <pxCurrentTCB>
 be8:	f0 91 80 04 	lds	r31, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 bec:	82 8d       	ldd	r24, Z+26	; 0x1a
 bee:	98 17       	cp	r25, r24
 bf0:	08 f0       	brcs	.+2      	; 0xbf4 <xTaskIncrementTick+0x144>
 bf2:	aa cf       	rjmp	.-172    	; 0xb48 <xTaskIncrementTick+0x98>
 bf4:	ad cf       	rjmp	.-166    	; 0xb50 <xTaskIncrementTick+0xa0>
 bf6:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <pxCurrentTCB>
 bfa:	f0 91 80 04 	lds	r31, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 bfe:	e2 8d       	ldd	r30, Z+26	; 0x1a
 c00:	8b e0       	ldi	r24, 0x0B	; 11
 c02:	e8 9f       	mul	r30, r24
 c04:	f0 01       	movw	r30, r0
 c06:	11 24       	eor	r1, r1
 c08:	ed 5a       	subi	r30, 0xAD	; 173
 c0a:	fb 4f       	sbci	r31, 0xFB	; 251
 c0c:	80 81       	ld	r24, Z
 c0e:	82 30       	cpi	r24, 0x02	; 2
 c10:	10 f0       	brcs	.+4      	; 0xc16 <xTaskIncrementTick+0x166>
 c12:	bb 24       	eor	r11, r11
 c14:	b3 94       	inc	r11
 c16:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <xYieldPending>
 c1a:	81 11       	cpse	r24, r1
 c1c:	16 c0       	rjmp	.+44     	; 0xc4a <xTaskIncrementTick+0x19a>
 c1e:	17 c0       	rjmp	.+46     	; 0xc4e <xTaskIncrementTick+0x19e>
 c20:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <xPendedTicks>
 c24:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <xPendedTicks+0x1>
 c28:	a0 91 0e 04 	lds	r26, 0x040E	; 0x80040e <xPendedTicks+0x2>
 c2c:	b0 91 0f 04 	lds	r27, 0x040F	; 0x80040f <xPendedTicks+0x3>
 c30:	01 96       	adiw	r24, 0x01	; 1
 c32:	a1 1d       	adc	r26, r1
 c34:	b1 1d       	adc	r27, r1
 c36:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <xPendedTicks>
 c3a:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <xPendedTicks+0x1>
 c3e:	a0 93 0e 04 	sts	0x040E, r26	; 0x80040e <xPendedTicks+0x2>
 c42:	b0 93 0f 04 	sts	0x040F, r27	; 0x80040f <xPendedTicks+0x3>
 c46:	b1 2c       	mov	r11, r1
 c48:	02 c0       	rjmp	.+4      	; 0xc4e <xTaskIncrementTick+0x19e>
 c4a:	bb 24       	eor	r11, r11
 c4c:	b3 94       	inc	r11
 c4e:	8b 2d       	mov	r24, r11
 c50:	df 91       	pop	r29
 c52:	cf 91       	pop	r28
 c54:	1f 91       	pop	r17
 c56:	0f 91       	pop	r16
 c58:	ff 90       	pop	r15
 c5a:	ef 90       	pop	r14
 c5c:	df 90       	pop	r13
 c5e:	cf 90       	pop	r12
 c60:	bf 90       	pop	r11
 c62:	08 95       	ret

00000c64 <xTaskResumeAll>:
 c64:	cf 92       	push	r12
 c66:	df 92       	push	r13
 c68:	ef 92       	push	r14
 c6a:	ff 92       	push	r15
 c6c:	0f 93       	push	r16
 c6e:	1f 93       	push	r17
 c70:	cf 93       	push	r28
 c72:	df 93       	push	r29
 c74:	0f b6       	in	r0, 0x3f	; 63
 c76:	f8 94       	cli
 c78:	0f 92       	push	r0
 c7a:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <uxSchedulerSuspended>
 c7e:	81 50       	subi	r24, 0x01	; 1
 c80:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <uxSchedulerSuspended>
 c84:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <uxSchedulerSuspended>
 c88:	81 11       	cpse	r24, r1
 c8a:	5f c0       	rjmp	.+190    	; 0xd4a <xTaskResumeAll+0xe6>
 c8c:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <uxCurrentNumberOfTasks>
 c90:	81 11       	cpse	r24, r1
 c92:	2a c0       	rjmp	.+84     	; 0xce8 <xTaskResumeAll+0x84>
 c94:	5d c0       	rjmp	.+186    	; 0xd50 <xTaskResumeAll+0xec>
 c96:	e0 91 35 04 	lds	r30, 0x0435	; 0x800435 <xPendingReadyList+0x7>
 c9a:	f0 91 36 04 	lds	r31, 0x0436	; 0x800436 <xPendingReadyList+0x8>
 c9e:	c0 85       	ldd	r28, Z+8	; 0x08
 ca0:	d1 85       	ldd	r29, Z+9	; 0x09
 ca2:	ce 01       	movw	r24, r28
 ca4:	0e 96       	adiw	r24, 0x0e	; 14
 ca6:	af da       	rcall	.-2722   	; 0x206 <uxListRemove>
 ca8:	8e 01       	movw	r16, r28
 caa:	0e 5f       	subi	r16, 0xFE	; 254
 cac:	1f 4f       	sbci	r17, 0xFF	; 255
 cae:	c8 01       	movw	r24, r16
 cb0:	aa da       	rcall	.-2732   	; 0x206 <uxListRemove>
 cb2:	8a 8d       	ldd	r24, Y+26	; 0x1a
 cb4:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <uxTopReadyPriority>
 cb8:	98 17       	cp	r25, r24
 cba:	10 f4       	brcc	.+4      	; 0xcc0 <xTaskResumeAll+0x5c>
 cbc:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <uxTopReadyPriority>
 cc0:	2b e0       	ldi	r18, 0x0B	; 11
 cc2:	82 9f       	mul	r24, r18
 cc4:	c0 01       	movw	r24, r0
 cc6:	11 24       	eor	r1, r1
 cc8:	b8 01       	movw	r22, r16
 cca:	8d 5a       	subi	r24, 0xAD	; 173
 ccc:	9b 4f       	sbci	r25, 0xFB	; 251
 cce:	3d da       	rcall	.-2950   	; 0x14a <vListInsertEnd>
 cd0:	9a 8d       	ldd	r25, Y+26	; 0x1a
 cd2:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <pxCurrentTCB>
 cd6:	f0 91 80 04 	lds	r31, 0x0480	; 0x800480 <pxCurrentTCB+0x1>
 cda:	82 8d       	ldd	r24, Z+26	; 0x1a
 cdc:	98 17       	cp	r25, r24
 cde:	30 f0       	brcs	.+12     	; 0xcec <xTaskResumeAll+0x88>
 ce0:	81 e0       	ldi	r24, 0x01	; 1
 ce2:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <xYieldPending>
 ce6:	02 c0       	rjmp	.+4      	; 0xcec <xTaskResumeAll+0x88>
 ce8:	c0 e0       	ldi	r28, 0x00	; 0
 cea:	d0 e0       	ldi	r29, 0x00	; 0
 cec:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <xPendingReadyList>
 cf0:	81 11       	cpse	r24, r1
 cf2:	d1 cf       	rjmp	.-94     	; 0xc96 <xTaskResumeAll+0x32>
 cf4:	cd 2b       	or	r28, r29
 cf6:	09 f0       	breq	.+2      	; 0xcfa <xTaskResumeAll+0x96>
 cf8:	3d dc       	rcall	.-1926   	; 0x574 <prvResetNextTaskUnblockTime>
 cfa:	c0 90 0c 04 	lds	r12, 0x040C	; 0x80040c <xPendedTicks>
 cfe:	d0 90 0d 04 	lds	r13, 0x040D	; 0x80040d <xPendedTicks+0x1>
 d02:	e0 90 0e 04 	lds	r14, 0x040E	; 0x80040e <xPendedTicks+0x2>
 d06:	f0 90 0f 04 	lds	r15, 0x040F	; 0x80040f <xPendedTicks+0x3>
 d0a:	c1 14       	cp	r12, r1
 d0c:	d1 04       	cpc	r13, r1
 d0e:	e1 04       	cpc	r14, r1
 d10:	f1 04       	cpc	r15, r1
 d12:	a1 f0       	breq	.+40     	; 0xd3c <xTaskResumeAll+0xd8>
 d14:	cd de       	rcall	.-614    	; 0xab0 <xTaskIncrementTick>
 d16:	88 23       	and	r24, r24
 d18:	19 f0       	breq	.+6      	; 0xd20 <xTaskResumeAll+0xbc>
 d1a:	81 e0       	ldi	r24, 0x01	; 1
 d1c:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <xYieldPending>
 d20:	81 e0       	ldi	r24, 0x01	; 1
 d22:	c8 1a       	sub	r12, r24
 d24:	d1 08       	sbc	r13, r1
 d26:	e1 08       	sbc	r14, r1
 d28:	f1 08       	sbc	r15, r1
 d2a:	a1 f7       	brne	.-24     	; 0xd14 <xTaskResumeAll+0xb0>
 d2c:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <xPendedTicks>
 d30:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <xPendedTicks+0x1>
 d34:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <xPendedTicks+0x2>
 d38:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <xPendedTicks+0x3>
 d3c:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <xYieldPending>
 d40:	88 23       	and	r24, r24
 d42:	29 f0       	breq	.+10     	; 0xd4e <xTaskResumeAll+0xea>
 d44:	2f db       	rcall	.-2466   	; 0x3a4 <vPortYield>
 d46:	81 e0       	ldi	r24, 0x01	; 1
 d48:	03 c0       	rjmp	.+6      	; 0xd50 <xTaskResumeAll+0xec>
 d4a:	80 e0       	ldi	r24, 0x00	; 0
 d4c:	01 c0       	rjmp	.+2      	; 0xd50 <xTaskResumeAll+0xec>
 d4e:	80 e0       	ldi	r24, 0x00	; 0
 d50:	0f 90       	pop	r0
 d52:	0f be       	out	0x3f, r0	; 63
 d54:	df 91       	pop	r29
 d56:	cf 91       	pop	r28
 d58:	1f 91       	pop	r17
 d5a:	0f 91       	pop	r16
 d5c:	ff 90       	pop	r15
 d5e:	ef 90       	pop	r14
 d60:	df 90       	pop	r13
 d62:	cf 90       	pop	r12
 d64:	08 95       	ret

00000d66 <vTaskDelayUntil>:
 d66:	cf 92       	push	r12
 d68:	df 92       	push	r13
 d6a:	ef 92       	push	r14
 d6c:	ff 92       	push	r15
 d6e:	0f 93       	push	r16
 d70:	1f 93       	push	r17
 d72:	cf 93       	push	r28
 d74:	df 93       	push	r29
 d76:	ec 01       	movw	r28, r24
 d78:	6a 01       	movw	r12, r20
 d7a:	7b 01       	movw	r14, r22
 d7c:	85 de       	rcall	.-758    	; 0xa88 <vTaskSuspendAll>
 d7e:	00 91 12 04 	lds	r16, 0x0412	; 0x800412 <xTickCount>
 d82:	10 91 13 04 	lds	r17, 0x0413	; 0x800413 <xTickCount+0x1>
 d86:	20 91 14 04 	lds	r18, 0x0414	; 0x800414 <xTickCount+0x2>
 d8a:	30 91 15 04 	lds	r19, 0x0415	; 0x800415 <xTickCount+0x3>
 d8e:	88 81       	ld	r24, Y
 d90:	99 81       	ldd	r25, Y+1	; 0x01
 d92:	aa 81       	ldd	r26, Y+2	; 0x02
 d94:	bb 81       	ldd	r27, Y+3	; 0x03
 d96:	ac 01       	movw	r20, r24
 d98:	bd 01       	movw	r22, r26
 d9a:	4c 0d       	add	r20, r12
 d9c:	5d 1d       	adc	r21, r13
 d9e:	6e 1d       	adc	r22, r14
 da0:	7f 1d       	adc	r23, r15
 da2:	08 17       	cp	r16, r24
 da4:	19 07       	cpc	r17, r25
 da6:	2a 07       	cpc	r18, r26
 da8:	3b 07       	cpc	r19, r27
 daa:	60 f4       	brcc	.+24     	; 0xdc4 <vTaskDelayUntil+0x5e>
 dac:	48 17       	cp	r20, r24
 dae:	59 07       	cpc	r21, r25
 db0:	6a 07       	cpc	r22, r26
 db2:	7b 07       	cpc	r23, r27
 db4:	98 f4       	brcc	.+38     	; 0xddc <vTaskDelayUntil+0x76>
 db6:	04 17       	cp	r16, r20
 db8:	15 07       	cpc	r17, r21
 dba:	26 07       	cpc	r18, r22
 dbc:	37 07       	cpc	r19, r23
 dbe:	80 f0       	brcs	.+32     	; 0xde0 <vTaskDelayUntil+0x7a>
 dc0:	80 e0       	ldi	r24, 0x00	; 0
 dc2:	13 c0       	rjmp	.+38     	; 0xdea <vTaskDelayUntil+0x84>
 dc4:	48 17       	cp	r20, r24
 dc6:	59 07       	cpc	r21, r25
 dc8:	6a 07       	cpc	r22, r26
 dca:	7b 07       	cpc	r23, r27
 dcc:	58 f0       	brcs	.+22     	; 0xde4 <vTaskDelayUntil+0x7e>
 dce:	04 17       	cp	r16, r20
 dd0:	15 07       	cpc	r17, r21
 dd2:	26 07       	cpc	r18, r22
 dd4:	37 07       	cpc	r19, r23
 dd6:	40 f0       	brcs	.+16     	; 0xde8 <vTaskDelayUntil+0x82>
 dd8:	80 e0       	ldi	r24, 0x00	; 0
 dda:	07 c0       	rjmp	.+14     	; 0xdea <vTaskDelayUntil+0x84>
 ddc:	80 e0       	ldi	r24, 0x00	; 0
 dde:	05 c0       	rjmp	.+10     	; 0xdea <vTaskDelayUntil+0x84>
 de0:	81 e0       	ldi	r24, 0x01	; 1
 de2:	03 c0       	rjmp	.+6      	; 0xdea <vTaskDelayUntil+0x84>
 de4:	81 e0       	ldi	r24, 0x01	; 1
 de6:	01 c0       	rjmp	.+2      	; 0xdea <vTaskDelayUntil+0x84>
 de8:	81 e0       	ldi	r24, 0x01	; 1
 dea:	48 83       	st	Y, r20
 dec:	59 83       	std	Y+1, r21	; 0x01
 dee:	6a 83       	std	Y+2, r22	; 0x02
 df0:	7b 83       	std	Y+3, r23	; 0x03
 df2:	88 23       	and	r24, r24
 df4:	41 f0       	breq	.+16     	; 0xe06 <vTaskDelayUntil+0xa0>
 df6:	cb 01       	movw	r24, r22
 df8:	ba 01       	movw	r22, r20
 dfa:	60 1b       	sub	r22, r16
 dfc:	71 0b       	sbc	r23, r17
 dfe:	82 0b       	sbc	r24, r18
 e00:	93 0b       	sbc	r25, r19
 e02:	40 e0       	ldi	r20, 0x00	; 0
 e04:	03 dd       	rcall	.-1530   	; 0x80c <prvAddCurrentTaskToDelayedList>
 e06:	2e df       	rcall	.-420    	; 0xc64 <xTaskResumeAll>
 e08:	81 11       	cpse	r24, r1
 e0a:	01 c0       	rjmp	.+2      	; 0xe0e <vTaskDelayUntil+0xa8>
 e0c:	cb da       	rcall	.-2666   	; 0x3a4 <vPortYield>
 e0e:	df 91       	pop	r29
 e10:	cf 91       	pop	r28
 e12:	1f 91       	pop	r17
 e14:	0f 91       	pop	r16
 e16:	ff 90       	pop	r15
 e18:	ef 90       	pop	r14
 e1a:	df 90       	pop	r13
 e1c:	cf 90       	pop	r12
 e1e:	08 95       	ret

00000e20 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 e20:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <uxSchedulerSuspended>
 e24:	88 23       	and	r24, r24
 e26:	21 f0       	breq	.+8      	; 0xe30 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 e28:	81 e0       	ldi	r24, 0x01	; 1
 e2a:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <xYieldPending>
 e2e:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 e30:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <xYieldPending>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 e34:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <uxTopReadyPriority>
 e38:	01 c0       	rjmp	.+2      	; 0xe3c <vTaskSwitchContext+0x1c>
 e3a:	81 50       	subi	r24, 0x01	; 1
 e3c:	28 2f       	mov	r18, r24
 e3e:	30 e0       	ldi	r19, 0x00	; 0
 e40:	9b e0       	ldi	r25, 0x0B	; 11
 e42:	92 9f       	mul	r25, r18
 e44:	f0 01       	movw	r30, r0
 e46:	93 9f       	mul	r25, r19
 e48:	f0 0d       	add	r31, r0
 e4a:	11 24       	eor	r1, r1
 e4c:	ed 5a       	subi	r30, 0xAD	; 173
 e4e:	fb 4f       	sbci	r31, 0xFB	; 251
 e50:	90 81       	ld	r25, Z
 e52:	99 23       	and	r25, r25
 e54:	91 f3       	breq	.-28     	; 0xe3a <vTaskSwitchContext+0x1a>
 e56:	9b e0       	ldi	r25, 0x0B	; 11
 e58:	92 9f       	mul	r25, r18
 e5a:	a0 01       	movw	r20, r0
 e5c:	93 9f       	mul	r25, r19
 e5e:	50 0d       	add	r21, r0
 e60:	11 24       	eor	r1, r1
 e62:	df 01       	movw	r26, r30
 e64:	01 80       	ldd	r0, Z+1	; 0x01
 e66:	f2 81       	ldd	r31, Z+2	; 0x02
 e68:	e0 2d       	mov	r30, r0
 e6a:	04 80       	ldd	r0, Z+4	; 0x04
 e6c:	f5 81       	ldd	r31, Z+5	; 0x05
 e6e:	e0 2d       	mov	r30, r0
 e70:	12 96       	adiw	r26, 0x02	; 2
 e72:	fc 93       	st	X, r31
 e74:	ee 93       	st	-X, r30
 e76:	11 97       	sbiw	r26, 0x01	; 1
 e78:	4a 5a       	subi	r20, 0xAA	; 170
 e7a:	5b 4f       	sbci	r21, 0xFB	; 251
 e7c:	e4 17       	cp	r30, r20
 e7e:	f5 07       	cpc	r31, r21
 e80:	29 f4       	brne	.+10     	; 0xe8c <vTaskSwitchContext+0x6c>
 e82:	44 81       	ldd	r20, Z+4	; 0x04
 e84:	55 81       	ldd	r21, Z+5	; 0x05
 e86:	fd 01       	movw	r30, r26
 e88:	52 83       	std	Z+2, r21	; 0x02
 e8a:	41 83       	std	Z+1, r20	; 0x01
 e8c:	9b e0       	ldi	r25, 0x0B	; 11
 e8e:	92 9f       	mul	r25, r18
 e90:	f0 01       	movw	r30, r0
 e92:	93 9f       	mul	r25, r19
 e94:	f0 0d       	add	r31, r0
 e96:	11 24       	eor	r1, r1
 e98:	ed 5a       	subi	r30, 0xAD	; 173
 e9a:	fb 4f       	sbci	r31, 0xFB	; 251
 e9c:	01 80       	ldd	r0, Z+1	; 0x01
 e9e:	f2 81       	ldd	r31, Z+2	; 0x02
 ea0:	e0 2d       	mov	r30, r0
 ea2:	20 85       	ldd	r18, Z+8	; 0x08
 ea4:	31 85       	ldd	r19, Z+9	; 0x09
 ea6:	30 93 80 04 	sts	0x0480, r19	; 0x800480 <pxCurrentTCB+0x1>
 eaa:	20 93 7f 04 	sts	0x047F, r18	; 0x80047f <pxCurrentTCB>
 eae:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <uxTopReadyPriority>
 eb2:	08 95       	ret

00000eb4 <task_blinkLedBlue>:

//task_blinkLedBlue() function definition
//Function keeps counting upto 100 post which it will delete itself
//Whilst counting it will also toggle the Blue LED every 500ms
void task_blinkLedBlue(void *p)
{
 eb4:	cf 93       	push	r28
 eb6:	df 93       	push	r29
 eb8:	00 d0       	rcall	.+0      	; 0xeba <task_blinkLedBlue+0x6>
 eba:	00 d0       	rcall	.+0      	; 0xebc <task_blinkLedBlue+0x8>
 ebc:	cd b7       	in	r28, 0x3d	; 61
 ebe:	de b7       	in	r29, 0x3e	; 62
 ec0:	8c 01       	movw	r16, r24
	uint16_t count = (uint16_t*) p;
	
	TickType_t lastWakeUp;

	//Acquire the information of the actual delay elapsed
	lastWakeUp = xTaskGetTickCount();	
 ec2:	e8 dd       	rcall	.-1072   	; 0xa94 <xTaskGetTickCount>
 ec4:	69 83       	std	Y+1, r22	; 0x01
 ec6:	7a 83       	std	Y+2, r23	; 0x02
 ec8:	8b 83       	std	Y+3, r24	; 0x03
 eca:	9c 83       	std	Y+4, r25	; 0x04
	
	BitSet(DEBUG_LED_PORT, BLUE_LED);
 ecc:	e2 e0       	ldi	r30, 0x02	; 2
 ece:	f1 e0       	ldi	r31, 0x01	; 1
 ed0:	80 81       	ld	r24, Z
 ed2:	88 60       	ori	r24, 0x08	; 8
 ed4:	80 83       	st	Z, r24
 ed6:	01 c0       	rjmp	.+2      	; 0xeda <task_blinkLedBlue+0x26>

//task_blinkLedBlue() function definition
//Function keeps counting upto 100 post which it will delete itself
//Whilst counting it will also toggle the Blue LED every 500ms
void task_blinkLedBlue(void *p)
{
 ed8:	87 01       	movw	r16, r14
	{
		//vTaskDelay() is a generic delays which will offer at the ticks passed to the function, it won't be accurate.
		//vTaskDelay(pdMS_TO_TICKS(500));
				
		//vTaskDelayUntil offers more accuracy compared to vTaskDelay(pdMS_TO_TICKS(500))
		vTaskDelayUntil(&lastWakeUp,pdMS_TO_TICKS(500));
 eda:	44 ef       	ldi	r20, 0xF4	; 244
 edc:	51 e0       	ldi	r21, 0x01	; 1
 ede:	60 e0       	ldi	r22, 0x00	; 0
 ee0:	70 e0       	ldi	r23, 0x00	; 0
 ee2:	ce 01       	movw	r24, r28
 ee4:	01 96       	adiw	r24, 0x01	; 1
 ee6:	3f df       	rcall	.-386    	; 0xd66 <vTaskDelayUntil>
		
		//Toggle Pin to create blink activity
		BitToggle(DEBUG_LED_PORT, BLUE_LED);
 ee8:	e2 e0       	ldi	r30, 0x02	; 2
 eea:	f1 e0       	ldi	r31, 0x01	; 1
 eec:	90 81       	ld	r25, Z
 eee:	88 e0       	ldi	r24, 0x08	; 8
 ef0:	89 27       	eor	r24, r25
 ef2:	80 83       	st	Z, r24
		
		if(count++ > 50)
 ef4:	78 01       	movw	r14, r16
 ef6:	8f ef       	ldi	r24, 0xFF	; 255
 ef8:	e8 1a       	sub	r14, r24
 efa:	f8 0a       	sbc	r15, r24
 efc:	03 33       	cpi	r16, 0x33	; 51
 efe:	11 05       	cpc	r17, r1
 f00:	58 f3       	brcs	.-42     	; 0xed8 <task_blinkLedBlue+0x24>
			vTaskDelete(blinkLedBlue_task1Handle);	//Delete task 
 f02:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <blinkLedBlue_task1Handle>
 f06:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <blinkLedBlue_task1Handle+0x1>
 f0a:	42 dd       	rcall	.-1404   	; 0x990 <vTaskDelete>
 f0c:	e5 cf       	rjmp	.-54     	; 0xed8 <task_blinkLedBlue+0x24>

00000f0e <main>:
/****************************/


int main(void)
{
	BitSet(DEBUG_LED_DDR, BLUE_LED);
 f0e:	e1 e0       	ldi	r30, 0x01	; 1
 f10:	f1 e0       	ldi	r31, 0x01	; 1
 f12:	80 81       	ld	r24, Z
 f14:	88 60       	ori	r24, 0x08	; 8
 f16:	80 83       	st	Z, r24
	//2nd arg: task name, 
	//3rd arg: stack size, 
	//4th arg: initial value passed to the function, 
	//5th arg: task priority, 
	//6th arg: task handle
	xTaskCreate(task_blinkLedBlue, "Blue", configMINIMAL_STACK_SIZE,(void*) 10, blinkLED_TASK_PRIORITY, &blinkLedBlue_task1Handle);
 f18:	0f 2e       	mov	r0, r31
 f1a:	f1 e8       	ldi	r31, 0x81	; 129
 f1c:	ef 2e       	mov	r14, r31
 f1e:	f4 e0       	ldi	r31, 0x04	; 4
 f20:	ff 2e       	mov	r15, r31
 f22:	f0 2d       	mov	r31, r0
 f24:	00 e0       	ldi	r16, 0x00	; 0
 f26:	2a e0       	ldi	r18, 0x0A	; 10
 f28:	30 e0       	ldi	r19, 0x00	; 0
 f2a:	45 e5       	ldi	r20, 0x55	; 85
 f2c:	50 e0       	ldi	r21, 0x00	; 0
 f2e:	65 e0       	ldi	r22, 0x05	; 5
 f30:	72 e0       	ldi	r23, 0x02	; 2
 f32:	8a e5       	ldi	r24, 0x5A	; 90
 f34:	97 e0       	ldi	r25, 0x07	; 7
 f36:	dd dc       	rcall	.-1606   	; 0x8f2 <xTaskCreate>
	
	vTaskStartScheduler();
 f38:	76 dd       	rcall	.-1300   	; 0xa26 <vTaskStartScheduler>
 f3a:	ff cf       	rjmp	.-2      	; 0xf3a <main+0x2c>

00000f3c <_exit>:
 f3c:	f8 94       	cli

00000f3e <__stop_program>:
 f3e:	ff cf       	rjmp	.-2      	; 0xf3e <__stop_program>
